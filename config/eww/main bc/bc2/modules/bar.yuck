(defwidget music []
  (eventbox :onhover "${eww} update music-control=true"
            :onhoverlost "${eww} update music-control=false"
            :cursor "pointer"
    (revealer :transition "slideup"
              :reveal {current-music-seek != "" ? "true" : "false"}
              :duration "500ms"
    (box  :class "musify"
          :orientation "horizontal"
          :space-evenly "false"
          :halign "center"
          (box :class "song-cover-art" :vexpand "false" :hexpand "false" :style "background-image: url('${current-music-cover}');")
      (box :class "parentbox"
            :orientation "vertical"
        (label  :text {music != "" ? "${music}" : ""}
                :truncate "true"
                :limit-width "25")
        (scale :class "musicbar"
               :value {current-music-seek != '' ? "${current-music-seek}" : "0"}
               :orientation "horizontal"
               :max 101
               :min 0
               :onchange "~/.config/eww/scripts/set-music-seek.sh {}"))
        (revealer :transition "slideleft"
                  :reveal music-control
                  :duration "300ms"
          (box  :class "music-control"
                :space-evenly "true"
                :spacing "16"
            (button :class "prev"
                    :onclick "playerctl --player=ncspot previous" "")
            (button :class "pause"
                    :onclick "playerctl --player=ncspot play-pause" "")
            (button :class "next"
                    :onclick "playerctl --player=ncspot next" "")))))))


(defwidget bar []
    (box :class "bar-widget" :orientation "h" :space-evenly true

        (box :orientation "h" :space-evenly false :halign "start"
            (logo)
             (clock)
        )

        (box :orientation "h" :space-evenly false :halign "center"
          
             (workspaces)
        )

        (box :orientation "h" :space-evenly false :halign "end"
            (tray_button)
            (language)
            (picker)
            (indicator)
            (power)
        )

    )
    
)

(defwindow corner-left
  :stacking "fg"
  :monitor 0
  :geometry (geometry 
              :y "-8px"
              :anchor "bottom left")
  (box :class "corner left")  
)

(defwindow corner-right
  :stacking "fg"
  :monitor 0
  :geometry (geometry 
              :y "-8px"
              :anchor "bottom right")
  (box :class "corner right")  
)
